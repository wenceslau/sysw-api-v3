package com.sysw.suite.core.application.module.retrieve.list;

import com.sysw.suite.core.domain.business.module.Module;
import com.sysw.suite.core.domain.business.module.ModuleGateway;
import com.sysw.suite.core.domain.business.module.ModuleID;
import com.sysw.suite.core.domain.business.module.SearchQuery;
import com.sysw.suite.core.domain.pagination.Pagination;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.Mockito;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Collections;
import java.util.List;

import static com.sysw.suite.core.domain.pagination.Direction.ASC;

@ExtendWith(MockitoExtension.class)
public class ListModuleUseCaseTest {

    @Mock
    private ModuleGateway moduleGateway;

    @InjectMocks
    private ListModuleUseCase useCase;

    @BeforeEach
    void cleanUp(){
        Mockito.reset(moduleGateway);
    }

    @Test
    void giveSearchQuery_whenCallListModule_thenShouldReturnModuleListOutput(){
        //Given
        final var expectedPage = 0;
        final var expectedPerPage = 10;
        final var expectedTerms = "";
        final var expectedSort = "createdAt";
        final var expectedDirection = ASC;

        var searchQuery = SearchQuery.with(expectedPage, expectedPerPage, expectedSort, expectedDirection);

        List<Module> moduleList = List.of(
                Module.newModule(ModuleID.from("123"), "-", "-", "-", true),
                Module.newModule(ModuleID.from("321"), "-", "-", "-", true)
        );
        final var expectedPagination = new Pagination<>(expectedPage, expectedPerPage, moduleList.size(), moduleList);
        final var expectedResult = expectedPagination.map(ModuleOutput::from);

        //when
        Mockito.when(moduleGateway.findAll(searchQuery)).thenReturn(expectedPagination);
        Pagination<ModuleOutput> result = useCase.execute(searchQuery);

        //Then
        Assertions.assertEquals(expectedResult, result);
        Assertions.assertEquals(expectedPage, result.currentPage());
        Assertions.assertEquals(expectedPerPage, result.perPage());
        Assertions.assertEquals(moduleList.size(), result.total());
        Assertions.assertEquals(moduleList.size(), result.items().size());
        Assertions.assertTrue(result.items().stream().allMatch(ModuleOutput.class::isInstance));

    }

    @Test
    void giveSearchQueryNoResults_whenCallListModule_thenShouldReturnModuleListOutput(){
        //Given
        final var expectedPage = 0;
        final var expectedPerPage = 10;
        final var expectedTerms = "";
        final var expectedSort = "createdAt";
        final var expectedDirection = ASC;

        var searchQuery = SearchQuery.with(expectedPage, expectedPerPage, expectedSort, expectedDirection);

        List<Module> moduleList = List.of();

        //when
        Mockito.when(moduleGateway.findAll(searchQuery))
                .thenReturn(new Pagination<>(expectedPage, expectedPerPage, moduleList.size(), moduleList));

        Pagination<ModuleOutput> result = useCase.execute(searchQuery);

        Assertions.assertEquals(expectedPage, result.currentPage());
        Assertions.assertEquals(expectedPerPage, result.perPage());
        Assertions.assertEquals(moduleList.size(), result.total());
        Assertions.assertEquals(moduleList.size(), result.items().size());
        Assertions.assertTrue(result.items().stream().allMatch(ModuleOutput.class::isInstance));

    }

    @Test
    void executeTest() {
        //Generated by AI
        // Mock Dependencies
        ModuleGateway moduleGateway = Mockito.mock(ModuleGateway.class);

        // Mock Data
        Module module = Mockito.mock(Module.class);
        List<Module> moduleList = Collections.singletonList(module);
        Pagination<Module> modules = new Pagination<>(0, 1, 1, moduleList);

        Mockito.when(moduleGateway.findAll((SearchQuery) Mockito.any())).thenReturn(modules);

        // Initialize UseCase
        ListModuleUseCase useCase = new ListModuleUseCase(moduleGateway);

        // Execute
        var searchQuery = SearchQuery.with(0, 0, "", ASC);
        Pagination<ModuleOutput> result = useCase.execute(searchQuery);

        // Assert and Verify
        Mockito.verify(moduleGateway, Mockito.times(1)).findAll((SearchQuery) Mockito.any());
        Assertions.assertEquals(modules.total(), result.total());
        Assertions.assertTrue(result.items().stream().allMatch(ModuleOutput.class::isInstance));
    }
}